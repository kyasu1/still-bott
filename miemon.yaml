version: '3.7'
services:
  postgres:
    image: postgres:14
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      #      - default
      - traefik

  graphql-engine:
    image: hasura/graphql-engine:v2.23.0
    depends_on:
      - "postgres"
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      HASURA_ACTION_SECRET: ${HASURA_ACTION_SECRET}
      HASURA_ACTION_ENDPOINT: "http://api:3000"
      # HASURA_GRAPHQL_CORS_DOMAIN: ${BACKEND_ENDPOINT}  
      # HASURA_GRAPHQL_CORS_DOMAIN: "*"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.graphql-engine.entrypoints=websecure"
      - "traefik.http.routers.graphql-engine.rule=Host(`graphql-engine.miemon.top`)"
      - "traefik.http.routers.graphql-engine.service=graphql-engine"
      - "traefik.http.routers.graphql-engine.tls=true"
      - "traefik.http.routers.graphql-engine.tls.certresolver=myresolver"
      - "traefik.http.routers.graphql-engine.tls.domains[0].main=graphql-engine.miemon.top"
      - "traefik.http.services.graphql-engine.loadbalancer.server.port=8080"
      
      - "traefik.http.middlewares.cors.headers.accesscontrolallowmethods=GET,OPTIONS,POST"
      # - "traefik.http.middlewares.cors.headers.accesscontrolallowheaders=*"
      # - "traefik.http.middlewares.cors.headers.accesscontrolalloworiginlist="
      - "traefik.http.middlewares.cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.cors.headers.addvaryheader=true"
      - "traefik.http.middlewares.cors.headers.customResponseHeaders.Access-Control-Allow-Origin=https://still-bott.miemon.top"
    networks:
      #      - default
      - traefik


  api:
    image: ghcr.io/kyasu1/still-bott:latest
    depends_on:
      - graphql-engine
    volumes:
      - ./dist:/app/dist
      - ./traefik/certs/still-bott.com.pem:/usr/local/share/ca-certificates/still-bott.com.crt
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.rule=Host(`still-bott.miemon.top`)"
      - "traefik.http.routers.api.service=api"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=myresolver"
      - "traefik.http.routers.api.tls.domains[0].main=still-bott.miemon.top"
      - "traefik.http.services.api.loadbalancer.server.port=3000"
    environment:
      RUST_LOG: "debug"
      LOG_LEVEL: ${LOG_LEVEL}
      TWITTER_CLIENT_ID: ${TWITTER_CLIENT_ID}
      TWITTER_CLIENT_SECRET: ${TWITTER_CLIENT_SECRET}
      BACKEND_ENDPOINT: ${BACKEND_ENDPOINT}
      SERVER_PORT: ${SERVER_PORT}
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      HASURA_ACTION_SECRET: ${HASURA_ACTION_SECRET}
      HASURA_GRAPHQL_ENDPOINT: ${HASURA_GRAPHQL_ENDPOINT}
      POSTGRES_ENDPOINT: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      API_KEY: ${API_KEY}
      API_SECRET_KEY: ${API_SECRET_KEY}
      ACCESS_TOKEN: ${ACCESS_TOKEN}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    networks:
      #      - default
      - traefik

volumes:
  db_data:

networks:
  traefik:
    name: traefik_net
    external: true

