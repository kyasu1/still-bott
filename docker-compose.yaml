version: '3.6'
services:
  postgres:
    image: postgres:14
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "15432:5432"
  graphql-engine:
    image: hasura/graphql-engine:v2.23.0
    ports:
      - "18080:8080"
    depends_on:
      - "postgres"
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      HASURA_ACTION_SECRET: ${HASURA_ACTION_SECRET}
      HASURA_ACTION_ENDPOINT: ${HASURA_ACTION_ENDPOINT}      
  minio:
    image: "minio/minio:RELEASE.2023-04-28T18-11-17Z"
    volumes:
      - "./minio/data:/data:delegated"
    ports:
      - 19000:9000
      - 19001:9001
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      # - MINIO_SERVER_URL=${MINIO_SERVER_URL}
    command: server /data --console-address :9001
  api:
    image: ghcr.io/kyasu1/still-bott:latest
    ports:
      - 3000:3000
    environment:
      LOG_LEVEL: ${LOG_LEVEL}
      TWITTER_CLIENT_ID: ${TWITTER_CLIENT_ID}
      TWITTER_CLIENT_SECRET: ${TWITTER_CLIENT_SECRET}
      TWITTER_AUTH_URL: ${TWITTER_AUTH_URL}
      TWITTER_TOKEN_URL: ${TWITTER_TOKEN_URL}
      BACKEND_ENDPOINT: ${BACKEND_ENDPOINT}
      SERVER_PORT: ${SERVER_PORT}
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      HASURA_ACTION_SECRET: ${HASURA_ACTION_SECRET}
      HASURA_ACTION_ENDPOINT: ${HASURA_ACTION_ENDPOINT}
      HASURA_ENDPOINT: ${HASURA_ENDPOINT}
      POSTGRES_ENDPOINT: ${POSTGRES_ENDPOINT}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      API_KEY: ${API_KEY}
      API_SECRET_KEY: ${API_SECRET_KEY}
      ACCESS_TOKEN: ${ACCESS_TOKEN}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
volumes:
  db_data:


