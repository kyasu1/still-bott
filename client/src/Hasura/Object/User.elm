-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Hasura.Object.User exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Hasura.Enum.Media_select_column
import Hasura.Enum.Message_select_column
import Hasura.Enum.Role_enum
import Hasura.Enum.Tag_select_column
import Hasura.Enum.Task_fixed_time_select_column
import Hasura.Enum.Task_rss_select_column
import Hasura.InputObject
import Hasura.Interface
import Hasura.Object
import Hasura.Scalar
import Hasura.Union
import Json.Decode as Decode
import ScalarCodecs


active : SelectionSet Bool Hasura.Object.User
active =
    Object.selectionForField "Bool" "active" [] Decode.bool


email : SelectionSet String Hasura.Object.User
email =
    Object.selectionForField "String" "email" [] Decode.string


email_confirm_code : SelectionSet (Maybe String) Hasura.Object.User
email_confirm_code =
    Object.selectionForField "(Maybe String)" "email_confirm_code" [] (Decode.string |> Decode.nullable)


email_confirm_code_issued_at : SelectionSet (Maybe ScalarCodecs.Timestamptz) Hasura.Object.User
email_confirm_code_issued_at =
    Object.selectionForField "(Maybe ScalarCodecs.Timestamptz)" "email_confirm_code_issued_at" [] (ScalarCodecs.codecs |> Hasura.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder |> Decode.nullable)


email_confirmed : SelectionSet Bool Hasura.Object.User
email_confirmed =
    Object.selectionForField "Bool" "email_confirmed" [] Decode.bool


email_confirmed_at : SelectionSet (Maybe ScalarCodecs.Timestamptz) Hasura.Object.User
email_confirmed_at =
    Object.selectionForField "(Maybe ScalarCodecs.Timestamptz)" "email_confirmed_at" [] (ScalarCodecs.codecs |> Hasura.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder |> Decode.nullable)


id : SelectionSet String Hasura.Object.User
id =
    Object.selectionForField "String" "id" [] Decode.string


last_seen : SelectionSet ScalarCodecs.Timestamptz Hasura.Object.User
last_seen =
    Object.selectionForField "ScalarCodecs.Timestamptz" "last_seen" [] (ScalarCodecs.codecs |> Hasura.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder)


type alias MediasOptionalArguments =
    { distinct_on : OptionalArgument (List Hasura.Enum.Media_select_column.Media_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Hasura.InputObject.Media_order_by)
    , where_ : OptionalArgument Hasura.InputObject.Media_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
medias :
    (MediasOptionalArguments -> MediasOptionalArguments)
    -> SelectionSet decodesTo Hasura.Object.Media
    -> SelectionSet (List decodesTo) Hasura.Object.User
medias fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum Hasura.Enum.Media_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (Hasura.InputObject.encodeMedia_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ Hasura.InputObject.encodeMedia_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "medias" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias MediasAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Hasura.Enum.Media_select_column.Media_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Hasura.InputObject.Media_order_by)
    , where_ : OptionalArgument Hasura.InputObject.Media_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
medias_aggregate :
    (MediasAggregateOptionalArguments -> MediasAggregateOptionalArguments)
    -> SelectionSet decodesTo Hasura.Object.Media_aggregate
    -> SelectionSet decodesTo Hasura.Object.User
medias_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum Hasura.Enum.Media_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (Hasura.InputObject.encodeMedia_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ Hasura.InputObject.encodeMedia_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "medias_aggregate" optionalArgs____ object____ Basics.identity


type alias MessagesOptionalArguments =
    { distinct_on : OptionalArgument (List Hasura.Enum.Message_select_column.Message_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Hasura.InputObject.Message_order_by)
    , where_ : OptionalArgument Hasura.InputObject.Message_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
messages :
    (MessagesOptionalArguments -> MessagesOptionalArguments)
    -> SelectionSet decodesTo Hasura.Object.Message
    -> SelectionSet (List decodesTo) Hasura.Object.User
messages fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum Hasura.Enum.Message_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (Hasura.InputObject.encodeMessage_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ Hasura.InputObject.encodeMessage_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "messages" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias MessagesAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Hasura.Enum.Message_select_column.Message_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Hasura.InputObject.Message_order_by)
    , where_ : OptionalArgument Hasura.InputObject.Message_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
messages_aggregate :
    (MessagesAggregateOptionalArguments -> MessagesAggregateOptionalArguments)
    -> SelectionSet decodesTo Hasura.Object.Message_aggregate
    -> SelectionSet decodesTo Hasura.Object.User
messages_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum Hasura.Enum.Message_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (Hasura.InputObject.encodeMessage_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ Hasura.InputObject.encodeMessage_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "messages_aggregate" optionalArgs____ object____ Basics.identity


registered_at : SelectionSet ScalarCodecs.Timestamptz Hasura.Object.User
registered_at =
    Object.selectionForField "ScalarCodecs.Timestamptz" "registered_at" [] (ScalarCodecs.codecs |> Hasura.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder)


role : SelectionSet Hasura.Enum.Role_enum.Role_enum Hasura.Object.User
role =
    Object.selectionForField "Enum.Role_enum.Role_enum" "role" [] Hasura.Enum.Role_enum.decoder


type alias TagOptionalArguments =
    { distinct_on : OptionalArgument (List Hasura.Enum.Tag_select_column.Tag_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Hasura.InputObject.Tag_order_by)
    , where_ : OptionalArgument Hasura.InputObject.Tag_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
tag :
    (TagOptionalArguments -> TagOptionalArguments)
    -> SelectionSet decodesTo Hasura.Object.Tag
    -> SelectionSet (List decodesTo) Hasura.Object.User
tag fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum Hasura.Enum.Tag_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (Hasura.InputObject.encodeTag_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ Hasura.InputObject.encodeTag_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "tag" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias TagAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Hasura.Enum.Tag_select_column.Tag_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Hasura.InputObject.Tag_order_by)
    , where_ : OptionalArgument Hasura.InputObject.Tag_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
tag_aggregate :
    (TagAggregateOptionalArguments -> TagAggregateOptionalArguments)
    -> SelectionSet decodesTo Hasura.Object.Tag_aggregate
    -> SelectionSet decodesTo Hasura.Object.User
tag_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum Hasura.Enum.Tag_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (Hasura.InputObject.encodeTag_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ Hasura.InputObject.encodeTag_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "tag_aggregate" optionalArgs____ object____ Basics.identity


type alias TasksFixedTimeOptionalArguments =
    { distinct_on : OptionalArgument (List Hasura.Enum.Task_fixed_time_select_column.Task_fixed_time_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Hasura.InputObject.Task_fixed_time_order_by)
    , where_ : OptionalArgument Hasura.InputObject.Task_fixed_time_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
tasks_fixed_time :
    (TasksFixedTimeOptionalArguments -> TasksFixedTimeOptionalArguments)
    -> SelectionSet decodesTo Hasura.Object.Task_fixed_time
    -> SelectionSet (List decodesTo) Hasura.Object.User
tasks_fixed_time fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum Hasura.Enum.Task_fixed_time_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (Hasura.InputObject.encodeTask_fixed_time_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ Hasura.InputObject.encodeTask_fixed_time_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "tasks_fixed_time" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias TasksFixedTimeAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Hasura.Enum.Task_fixed_time_select_column.Task_fixed_time_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Hasura.InputObject.Task_fixed_time_order_by)
    , where_ : OptionalArgument Hasura.InputObject.Task_fixed_time_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
tasks_fixed_time_aggregate :
    (TasksFixedTimeAggregateOptionalArguments -> TasksFixedTimeAggregateOptionalArguments)
    -> SelectionSet decodesTo Hasura.Object.Task_fixed_time_aggregate
    -> SelectionSet decodesTo Hasura.Object.User
tasks_fixed_time_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum Hasura.Enum.Task_fixed_time_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (Hasura.InputObject.encodeTask_fixed_time_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ Hasura.InputObject.encodeTask_fixed_time_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "tasks_fixed_time_aggregate" optionalArgs____ object____ Basics.identity


type alias TasksRssOptionalArguments =
    { distinct_on : OptionalArgument (List Hasura.Enum.Task_rss_select_column.Task_rss_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Hasura.InputObject.Task_rss_order_by)
    , where_ : OptionalArgument Hasura.InputObject.Task_rss_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
tasks_rss :
    (TasksRssOptionalArguments -> TasksRssOptionalArguments)
    -> SelectionSet decodesTo Hasura.Object.Task_rss
    -> SelectionSet (List decodesTo) Hasura.Object.User
tasks_rss fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum Hasura.Enum.Task_rss_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (Hasura.InputObject.encodeTask_rss_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ Hasura.InputObject.encodeTask_rss_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "tasks_rss" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias TasksRssAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Hasura.Enum.Task_rss_select_column.Task_rss_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Hasura.InputObject.Task_rss_order_by)
    , where_ : OptionalArgument Hasura.InputObject.Task_rss_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
tasks_rss_aggregate :
    (TasksRssAggregateOptionalArguments -> TasksRssAggregateOptionalArguments)
    -> SelectionSet decodesTo Hasura.Object.Task_rss_aggregate
    -> SelectionSet decodesTo Hasura.Object.User
tasks_rss_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum Hasura.Enum.Task_rss_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (Hasura.InputObject.encodeTask_rss_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ Hasura.InputObject.encodeTask_rss_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "tasks_rss_aggregate" optionalArgs____ object____ Basics.identity
