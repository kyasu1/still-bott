-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Hasura.Enum.Session_update_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| update columns of table "session"

  - Access\_token - column name
  - Expires\_in - column name
  - Id - column name
  - Issued\_at - column name
  - Name - column name
  - Refresh\_token - column name
  - User\_name - column name

-}
type Session_update_column
    = Access_token
    | Expires_in
    | Id
    | Issued_at
    | Name
    | Refresh_token
    | User_name


list : List Session_update_column
list =
    [ Access_token, Expires_in, Id, Issued_at, Name, Refresh_token, User_name ]


decoder : Decoder Session_update_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "access_token" ->
                        Decode.succeed Access_token

                    "expires_in" ->
                        Decode.succeed Expires_in

                    "id" ->
                        Decode.succeed Id

                    "issued_at" ->
                        Decode.succeed Issued_at

                    "name" ->
                        Decode.succeed Name

                    "refresh_token" ->
                        Decode.succeed Refresh_token

                    "user_name" ->
                        Decode.succeed User_name

                    _ ->
                        Decode.fail ("Invalid Session_update_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Session_update_column -> String
toString enum____ =
    case enum____ of
        Access_token ->
            "access_token"

        Expires_in ->
            "expires_in"

        Id ->
            "id"

        Issued_at ->
            "issued_at"

        Name ->
            "name"

        Refresh_token ->
            "refresh_token"

        User_name ->
            "user_name"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Session_update_column
fromString enumString____ =
    case enumString____ of
        "access_token" ->
            Just Access_token

        "expires_in" ->
            Just Expires_in

        "id" ->
            Just Id

        "issued_at" ->
            Just Issued_at

        "name" ->
            Just Name

        "refresh_token" ->
            Just Refresh_token

        "user_name" ->
            Just User_name

        _ ->
            Nothing
