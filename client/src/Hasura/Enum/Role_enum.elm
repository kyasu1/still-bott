-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Hasura.Enum.Role_enum exposing (..)

import Json.Decode as Decode exposing (Decoder)


type Role_enum
    = Anonymous
    | Basic
    | Premium


list : List Role_enum
list =
    [ Anonymous, Basic, Premium ]


decoder : Decoder Role_enum
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "anonymous" ->
                        Decode.succeed Anonymous

                    "basic" ->
                        Decode.succeed Basic

                    "premium" ->
                        Decode.succeed Premium

                    _ ->
                        Decode.fail ("Invalid Role_enum type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Role_enum -> String
toString enum____ =
    case enum____ of
        Anonymous ->
            "anonymous"

        Basic ->
            "basic"

        Premium ->
            "premium"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Role_enum
fromString enumString____ =
    case enumString____ of
        "anonymous" ->
            Just Anonymous

        "basic" ->
            Just Basic

        "premium" ->
            Just Premium

        _ ->
            Nothing
