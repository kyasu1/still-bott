-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Hasura.Enum.Message_update_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| update columns of table "message"

  - Created\_at - column name
  - Id - column name
  - Media\_id - column name
  - Priority - column name
  - Tag\_id - column name
  - Text - column name
  - Tweeted - column name
  - Updated\_at - column name
  - User\_id - column name

-}
type Message_update_column
    = Created_at
    | Id
    | Media_id
    | Priority
    | Tag_id
    | Text
    | Tweeted
    | Updated_at
    | User_id


list : List Message_update_column
list =
    [ Created_at, Id, Media_id, Priority, Tag_id, Text, Tweeted, Updated_at, User_id ]


decoder : Decoder Message_update_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "created_at" ->
                        Decode.succeed Created_at

                    "id" ->
                        Decode.succeed Id

                    "media_id" ->
                        Decode.succeed Media_id

                    "priority" ->
                        Decode.succeed Priority

                    "tag_id" ->
                        Decode.succeed Tag_id

                    "text" ->
                        Decode.succeed Text

                    "tweeted" ->
                        Decode.succeed Tweeted

                    "updated_at" ->
                        Decode.succeed Updated_at

                    "user_id" ->
                        Decode.succeed User_id

                    _ ->
                        Decode.fail ("Invalid Message_update_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Message_update_column -> String
toString enum____ =
    case enum____ of
        Created_at ->
            "created_at"

        Id ->
            "id"

        Media_id ->
            "media_id"

        Priority ->
            "priority"

        Tag_id ->
            "tag_id"

        Text ->
            "text"

        Tweeted ->
            "tweeted"

        Updated_at ->
            "updated_at"

        User_id ->
            "user_id"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Message_update_column
fromString enumString____ =
    case enumString____ of
        "created_at" ->
            Just Created_at

        "id" ->
            Just Id

        "media_id" ->
            Just Media_id

        "priority" ->
            Just Priority

        "tag_id" ->
            Just Tag_id

        "text" ->
            Just Text

        "tweeted" ->
            Just Tweeted

        "updated_at" ->
            Just Updated_at

        "user_id" ->
            Just User_id

        _ ->
            Nothing
