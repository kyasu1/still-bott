-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Hasura.Enum.User_select_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| select columns of table "user"

  - Active - column name
  - Email - column name
  - Email\_confirm\_code - column name
  - Email\_confirm\_code\_issued\_at - column name
  - Email\_confirmed - column name
  - Email\_confirmed\_at - column name
  - Id - column name
  - Last\_seen - column name
  - Registered\_at - column name
  - Role - column name

-}
type User_select_column
    = Active
    | Email
    | Email_confirm_code
    | Email_confirm_code_issued_at
    | Email_confirmed
    | Email_confirmed_at
    | Id
    | Last_seen
    | Registered_at
    | Role


list : List User_select_column
list =
    [ Active, Email, Email_confirm_code, Email_confirm_code_issued_at, Email_confirmed, Email_confirmed_at, Id, Last_seen, Registered_at, Role ]


decoder : Decoder User_select_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "active" ->
                        Decode.succeed Active

                    "email" ->
                        Decode.succeed Email

                    "email_confirm_code" ->
                        Decode.succeed Email_confirm_code

                    "email_confirm_code_issued_at" ->
                        Decode.succeed Email_confirm_code_issued_at

                    "email_confirmed" ->
                        Decode.succeed Email_confirmed

                    "email_confirmed_at" ->
                        Decode.succeed Email_confirmed_at

                    "id" ->
                        Decode.succeed Id

                    "last_seen" ->
                        Decode.succeed Last_seen

                    "registered_at" ->
                        Decode.succeed Registered_at

                    "role" ->
                        Decode.succeed Role

                    _ ->
                        Decode.fail ("Invalid User_select_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : User_select_column -> String
toString enum____ =
    case enum____ of
        Active ->
            "active"

        Email ->
            "email"

        Email_confirm_code ->
            "email_confirm_code"

        Email_confirm_code_issued_at ->
            "email_confirm_code_issued_at"

        Email_confirmed ->
            "email_confirmed"

        Email_confirmed_at ->
            "email_confirmed_at"

        Id ->
            "id"

        Last_seen ->
            "last_seen"

        Registered_at ->
            "registered_at"

        Role ->
            "role"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe User_select_column
fromString enumString____ =
    case enumString____ of
        "active" ->
            Just Active

        "email" ->
            Just Email

        "email_confirm_code" ->
            Just Email_confirm_code

        "email_confirm_code_issued_at" ->
            Just Email_confirm_code_issued_at

        "email_confirmed" ->
            Just Email_confirmed

        "email_confirmed_at" ->
            Just Email_confirmed_at

        "id" ->
            Just Id

        "last_seen" ->
            Just Last_seen

        "registered_at" ->
            Just Registered_at

        "role" ->
            Just Role

        _ ->
            Nothing
